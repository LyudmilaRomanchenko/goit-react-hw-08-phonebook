{"version":3,"sources":["components/Container/Container.module.css","components/Container/Container.js","views/LoginForm/LoginForm.module.css","views/LoginForm/LoginForm.js"],"names":["module","exports","Container","children","className","s","container","LoginForm","useState","email","setEmail","password","setPassword","dispatch","useDispatch","handleChange","target","name","value","form","onSubmit","e","preventDefault","authOperations","logIn","TextField","label","color","size","type","onChange","required","sx","styles","input","Button","variant","buttonStyles"],"mappings":"mIACAA,EAAOC,QAAU,CAAC,UAAY,+B,gGCCf,SAASC,EAAT,GAAkC,IAAbC,EAAY,EAAZA,SAClC,OAAO,qBAAKC,UAAWC,IAAEC,UAAlB,SAA8BH,M,oBCFvCH,EAAOC,QAAU,CAAC,KAAO,wBAAwB,aAAe,gCAAgC,aAAe,gCAAgC,OAAS,4B,wLC+EzIM,MApEf,WAIE,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,IAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACMC,EAAWC,cAEXC,EAAe,SAAC,GAAiC,IAAD,IAA9BC,OAAUC,EAAoB,EAApBA,KAAMC,EAAc,EAAdA,MACtC,OAAQD,GACN,IAAK,QACH,OAAOP,EAASQ,GAClB,IAAK,WACH,OAAON,EAAYM,GACrB,QACE,SAYN,OACE,cAAChB,EAAA,EAAD,UACE,uBAAME,UAAWC,IAAEc,KAAMC,SAVR,SAACC,GACpBA,EAAEC,iBAEFT,EAASU,IAAeC,MAAM,CAAEf,QAAOE,cACvCD,EAAS,IACTE,EAAY,KAKV,UACE,cAACa,EAAA,EAAD,CAEEC,MAAM,QACNC,MAAM,UACNC,KAAK,QACLC,KAAK,QACLZ,KAAK,QACLC,MAAOT,EACPqB,SAAUf,EACVgB,UAAQ,EACRC,GAAIC,IAAOC,QAEb,cAACT,EAAA,EAAD,CAEEC,MAAM,WACNC,MAAM,UACNC,KAAK,QACLC,KAAK,WACLZ,KAAK,WACLC,MAAOP,EACPmB,SAAUf,EACVgB,UAAQ,EACRC,GAAIC,IAAOC,QAGb,cAACC,EAAA,EAAD,CAEEN,KAAK,SACLO,QAAQ,YACRJ,GAAIC,IAAOI,aAJb","file":"static/js/6.a164f129.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Container_container__3U6R5\"};","import s from \"./Container.module.css\";\r\n\r\nexport default function Container({ children }) {\r\n  return <div className={s.container}>{children}</div>;\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"LoginForm_form__BM-ob\",\"lableContact\":\"LoginForm_lableContact__2blHV\",\"inputContact\":\"LoginForm_inputContact__3BMVm\",\"button\":\"LoginForm_button__UV2Uu\"};","import { useState } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport s from \"./LoginForm.module.css\";\nimport PropTypes from \"prop-types\";\nimport { authOperations, authSelectors } from \"../../redux/auth\";\nimport Button from \"@mui/material/Button\";\nimport TextField from \"@mui/material/TextField\";\nimport styles from \"../../styles/styles\";\n// import { toast } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Container from \"../../components/Container\";\n\nfunction LoginForm() {\n  // const error = useSelector(authSelectors.getError);\n  // console.log(\"error\", error);\n\n  const [email, setEmail] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const dispatch = useDispatch();\n\n  const handleChange = ({ target: { name, value } }) => {\n    switch (name) {\n      case \"email\":\n        return setEmail(value);\n      case \"password\":\n        return setPassword(value);\n      default:\n        return;\n    }\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    dispatch(authOperations.logIn({ email, password }));\n    setEmail(\"\");\n    setPassword(\"\");\n  };\n\n  return (\n    <Container>\n      <form className={s.form} onSubmit={handleSubmit}>\n        <TextField\n          // classes={classes.input}\n          label=\"Email\"\n          color=\"primary\"\n          size=\"small\"\n          type=\"email\"\n          name=\"email\"\n          value={email}\n          onChange={handleChange}\n          required\n          sx={styles.input}\n        />\n        <TextField\n          // classes={classes.input}\n          label=\"Password\"\n          color=\"primary\"\n          size=\"small\"\n          type=\"password\"\n          name=\"password\"\n          value={password}\n          onChange={handleChange}\n          required\n          sx={styles.input}\n        />\n\n        <Button\n          // classes={classes}\n          type=\"submit\"\n          variant=\"contained\"\n          sx={styles.buttonStyles}\n        >\n          Log in\n        </Button>\n      </form>\n    </Container>\n  );\n}\n\nexport default LoginForm;\n\n// RegisterForm.prototype = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.number.isRequired,\n//     }).isRequired\n//   ),\n//   addContact: PropTypes.func.isRequired,\n// };\n\n////////////////////////////////////////////////\n//  return (\n//     <form onSubmit={handleSubmit}>\n//       <label className={s.lableContact}>\n//         Name\n//         <input\n//           className={s.inputContact}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={handleChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//       </label>\n\n//       <label className={s.lableContact}>\n//         Number\n//         <input\n//           className={s.inputContact}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={handleChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//         />\n//       </label>\n\n//       <button className={s.button} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n///////////////////////////////////////////\n\n// Без toolkit\n\n// import { useState } from \"react\";\n// import { connect} from \"react-redux\";\n// import s from \"./ContactForm.module.css\";\n// import PropTypes from \"prop-types\";\n// import actions from \"../../redux/actions\";\n\n// function ContactForm({ addContact, contacts }) {\n//   const [name, setName] = useState(\"\");\n//   const [number, setNumber] = useState(\"\");\n\n//   const handleChange = (e) => {\n\n//     if (e.currentTarget.name === \"name\") {\n//       setName(e.currentTarget.value);\n//     }\n\n//     if (e.currentTarget.name === \"number\") {\n//       setNumber(e.currentTarget.value);\n//     }\n//   };\n\n//   const handleSubmit = (e) => {\n//     e.preventDefault();\n\n//     const isContactsIncludes = contacts.find(\n//       (contact) => contact.name === name\n//     );\n\n//     if (isContactsIncludes) {\n//       return alert(`${name} is alredy in contacts`);\n//     } else {\n//       addContact(name, number);\n//       setName(\"\");\n//       setNumber(\"\");\n//     }\n//   };\n\n//   return (\n//     <form onSubmit={handleSubmit}>\n//       <label className={s.lableContact}>\n//         Name\n//         <input\n//           className={s.inputContact}\n//           type=\"text\"\n//           name=\"name\"\n//           value={name}\n//           onChange={handleChange}\n//           pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n//           title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n//           required\n//         />\n//       </label>\n\n//       <label className={s.lableContact}>\n//         Number\n//         <input\n//           className={s.inputContact}\n//           type=\"tel\"\n//           name=\"number\"\n//           value={number}\n//           onChange={handleChange}\n//           pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n//           title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n//           required\n//         />\n//       </label>\n\n//       <button className={s.button} type=\"submit\">\n//         Add contact\n//       </button>\n//     </form>\n//   );\n// }\n\n// const mapStateToProps = (state) => ({\n//   contacts: state.contacts.items,\n// });\n\n// const mapDispatchToProps = (dispatch) => ({\n//   addContact: (name, number) => dispatch(actions.addContact(name, number)),\n// });\n\n// export default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n\n// ContactForm.prototype = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.shape({\n//       id: PropTypes.string.isRequired,\n//       name: PropTypes.string.isRequired,\n//       number: PropTypes.number.isRequired,\n//     }).isRequired\n//   ),\n//   addContact: PropTypes.func.isRequired,\n// };\n"],"sourceRoot":""}